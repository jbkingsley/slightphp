<?xml version="1.0"?>
<extension name="SlightPHP" version="0.1.0">
 <summary>SlightPHP Framework</summary>
 <description>
	This is PHP Framework, to help you develop faster...
 </description>

 <maintainer>
  	<user>Hetal</user>
	<name>Hetal</name>
	<email>admin@slightphp.com</email>
	<role>lead</role>
 </maintainer>
 <license>PHP</license>

 <release>
  <version>0.1</version>
  <date>2009-02-24</date>
  <state>stable</state>
  <notes>
   The sample extension is threadsafe.
  </notes>
 </release>
 <changelog>
  <release>
   <version>0.1</version>
   <date>2008-11-20</date>
   <state>alpha</state>
   <notes>First alpha version</notes>
  </release>
  <release>
   <version>0.2</version>
   <date>2008-02-24</date>
   <state>beta</state>
   <notes>beta version</notes>
  </release>
 </changelog>

 <deps language="c" platform="all">
	<extension name="apc" type="OPTIONAL"/>
 </deps>

 <constants>
  <constant name="SlightPHP_VERSION"   type="string"    value="0.1">
	SlightPHP Version
  </constant>
 </constants>
 <globals>
 <!--
  <global name="sample_int"    type="int"    value="42" />
  <phpini name="my_int" type="int" value="42" onupdate="OnUpdateLong" access="all">
   Definition for directive "sample.my_int"
  </phpini>
  -->

 </globals>



 <code position="top">
<![CDATA[
typedef struct _op_item{
	time_t op_mtime;
	zend_op_array op_codes;
}op_item;

#include "SlightPHP_globals.h"
#include "SlightPHP_globals.c"


]]>

 </code>
   <function role="internal" name="MINIT">
	<code>
	<![CDATA[
	]]>
	</code>
	</function>

   <function  role="internal" name="MSHUTDOWN">
	<code>
	<![CDATA[
	]]>
	</code>
	</function>

   <function  role="internal" name="RINIT">
	<code>
	<![CDATA[
	]]>
	</code>
	</function>

   <function role="internal" name="RSHUTDOWN">
	   <code>
	   <![CDATA[
	]]>
		</code>
	</function>

 <class name="SlightPHP">

   <property name="appDir" type="string" access="public" value="."/>
   <property name="pluginsDir" type="string" access="public" value="plugins"/>
   <property name="defaultZone" type="string" access="public" value="index"/>
   <property name="defaultClass" type="string" access="public" value="default"/>
   <property name="defaultMethod" type="string" access="public" value="entry"/>

   <property name="_debug" type="int" access="public" value="0"/>
   <function name="setAppDir">
   	<proto>void setAppDir(mixed appDir)</proto>
	<code>
<![CDATA[
	zend_update_property_string(_this_ce, _this_zval, "appDir", sizeof("appDir")-1, Z_STRVAL_P(appDir) TSRMLS_CC);
]]>
	</code>
   </function>
   

   <function name="getAppDir">
   	<proto>mixed getAppDir()</proto>
	<code>
<![CDATA[
	if (Z_TYPE_P(_this_zval) == IS_OBJECT) {
		zval *data = zend_read_property(_this_ce,_this_zval,"appDir",sizeof("appDir")-1,1 TSRMLS_CC);
    		RETURN_ZVAL(data,1,0);
	}
	return NULL;
]]>
	</code>
   </function>

   <function name="loadFile">
   	<proto>int loadFile(mixed filepath)</proto>
	<code>
	<![CDATA[
		zval *_debug_flag = zend_read_property(_this_ce,_this_zval,"_debug",sizeof("_debug")-1,1 TSRMLS_CC);
		int ret = SlightPHP_loadFile(filepath,_debug_flag TSRMLS_CC);
		ZVAL_LONG(return_value,ret);
		
	]]>
	</code>
   </function>
   <function name="loadPlugin">
   	<proto>int loadPlugin(mixed pluginName)</proto>
	<code>
	<![CDATA[
		zval *pluginsDir = zend_read_property(_this_ce,_this_zval,"pluginsDir",sizeof("pluginsDir")-1,1 TSRMLS_CC);
		zval *_debug_flag = zend_read_property(_this_ce,_this_zval,"_debug",sizeof("_debug")-1,1 TSRMLS_CC);
		char*inc_filename;
		int ret;
		spprintf(&inc_filename,0,"%s%c%s.class.php",Z_STRVAL_P(pluginsDir),DEFAULT_SLASH,Z_STRVAL_P(pluginName));
		zval file_name;
		ZVAL_STRING(&file_name,inc_filename,1);
		ret = SlightPHP_loadFile(&file_name,_debug_flag TSRMLS_CC);
		efree(inc_filename);
		ZVAL_LONG(return_value,ret);
	]]>
	</code>
   </function>
   <function name="__construct">
	<proto>void __construct([mixed version])</proto>
    	<code>
    	    <![CDATA[
    	    ]]>
    	</code>
   </function>
   
   <function name="run">
	<proto>void run()</proto>
 	<code>
	<![CDATA[
	
	zval *zone=NULL;
	zval *class_name=NULL;
	zval *method=NULL;

	zval **dest_entry;
	zval **token;
	zval *path=NULL;

	//{{{
	zval *_debug_flag = zend_read_property(_this_ce,_this_zval,"_debug",sizeof("_debug")-1,1 TSRMLS_CC);
	//}}}

	zend_is_auto_global("_SERVER", sizeof("_SERVER") - 1 TSRMLS_CC);
	if (zend_hash_find(&EG(symbol_table), "_SERVER",sizeof("_SERVER"), (void **) &dest_entry) == SUCCESS &&
			Z_TYPE_PP(dest_entry) == IS_ARRAY &&
            zend_hash_find(Z_ARRVAL_PP(dest_entry), "PATH_INFO", sizeof("PATH_INFO"), (void **) &token) == SUCCESS
	){
		path = token[0];
    	}

	zval *path_array;
	MAKE_STD_ZVAL(path_array);
	array_init(path_array);

	if (path){
		zval delim;
    		ZVAL_STRING(&delim, "/", 0);
		//{{{
		char                *regex="/\\//";
		pcre_cache_entry    *pce;
		if ((pce = pcre_get_compiled_regex_cache(regex, strlen(regex) TSRMLS_CC)) == NULL) {
        		RETURN_FALSE;
    		}
		php_pcre_split_impl(pce, Z_STRVAL_P(path),Z_STRLEN_P(path),path_array, -1, 1 TSRMLS_CC);
		
		//}}}
		int n_elems = zend_hash_num_elements(Z_ARRVAL_P(path_array));
		if(zend_hash_index_exists(Z_ARRVAL_P(path_array),0)){
			if(zend_hash_index_find(Z_ARRVAL_P(path_array), 0, (void **)&dest_entry) != FAILURE) {
				if(Z_STRLEN_PP(dest_entry)>0){
					zone = dest_entry[0];
				}
			}
		}
		if(zend_hash_index_exists(Z_ARRVAL_P(path_array),1)){
			if(zend_hash_index_find(Z_ARRVAL_P(path_array), 1, (void **)&dest_entry) != FAILURE) {
				if(Z_STRLEN_PP(dest_entry)>0){
					class_name = dest_entry[0];
				}
			}
		}
		if(zend_hash_index_exists(Z_ARRVAL_P(path_array),2)){
			if(zend_hash_index_find(Z_ARRVAL_P(path_array), 2, (void **)&dest_entry) != FAILURE) {
				if(Z_STRLEN_PP(dest_entry)>0){
					method = dest_entry[0];
				}
			}
		}
			
	}
	if(!zone){
		zone = zend_read_property(_this_ce,_this_zval,"defaultZone",sizeof("defaultZone")-1,1 TSRMLS_CC);
		zend_hash_next_index_insert(Z_ARRVAL_P(path_array),&zone,sizeof(zval*),NULL);
	}
	if(!class_name){
		class_name = zend_read_property(_this_ce,_this_zval,"defaultClass",sizeof("defaultClass")-1,1 TSRMLS_CC);
		zend_hash_next_index_insert(Z_ARRVAL_P(path_array),&class_name,sizeof(zval*),NULL);
	}
	if(!method){
		method = zend_read_property(_this_ce,_this_zval,"defaultMethod",sizeof("defaultMethod")-1,1 TSRMLS_CC);
		zend_hash_next_index_insert(Z_ARRVAL_P(path_array),&method,sizeof(zval*),NULL);
	}

	zval *tmp_result=NULL;

	zval *appDir = zend_read_property(_this_ce,_this_zval,"appDir",sizeof("appDir")-1,1 TSRMLS_CC);
	
	zval **params[1];
	params[0]=&path_array;


	if(SlightPHP_load(appDir,zone,class_name,_debug_flag TSRMLS_CC) == SUCCESS){
		if(SlightPHP_run(zone,class_name,method,&tmp_result,1,params,_debug_flag TSRMLS_CC)==SUCCESS){
		};
	}
	FREE_ZVAL(path_array);

	if(tmp_result){
		*return_value = *tmp_result;
		zval_copy_ctor(return_value);
		zval_ptr_dtor(&tmp_result);
	}else{
		RETURN_FALSE;
	}

	]]>
    </code>
   </function>
 </class>
</extension>
